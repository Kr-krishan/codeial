{"version":3,"sources":["helper/urls.js","helper/utils.js","actions/posts.js","actions/actionTypes.js","components/PostsList.js","actions/search.js","components/Navbar.js","actions/auth.js","components/Home.js","components/Page404.js","components/Login.js","components/Signup.js","components/Settings.js","actions/profile.js","actions/friends.js","components/UserProfile.js","components/FriendListItem.js","components/FriendList.js","components/CreatePost.js","components/Post.js","components/Comment.js","components/Chat.js","components/App.js","reducers/auth.js","reducers/profile.js","reducers/friends.js","reducers/search.js","reducers/index.js","reducers/posts.js","index.js","store/index.js"],"names":["API_ROOT","APIUrls","page","limit","userId","id","likeType","searchText","getFormBody","params","console","log","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","getAuthTokenFromLocalStorage","localStorage","getItem","fetchPosts","dispatch","url","fetch","then","response","json","data","type","posts","addLikes","postId","method","headers","Authorization","success","addLikeToPost","commentId","addLikeToComment","PostsList","this","props","className","map","post","key","_id","Component","connect","state","userSearchSuccess","users","userSearch","Navbar","logOut","removeItem","handleSearch","e","target","value","auth","results","search","to","src","alt","placeholder","onChange","length","user","name","isLoggedIn","onClick","React","Home","friends","Page404","Login","componentWillUnmount","handleEmailChange","setState","email","handlePasswordChange","password","handleFormSubmit","preventDefault","body","setItem","token","error","message","login","inProgress","from","location","pathname","required","disabled","Signup","handleUsernameChange","handleConfirmPasswordChange","confirmPassword","confirm_password","signup","Settings","handleChange","fieldName","handleUpdate","editUser","editMode","fetchUserProfile","removeFriends","UserProfile","checkFriendOfUser","match","friend","to_user","indexOf","handleAddFriend","a","option","successMsg","friendship","handleRemoveFriend","options","prevProps","prevParams","currParams","profile","isFriendOfUser","FriendListItem","FriendList","CreatePost","content","handleAddPost","Post","comment","handleKeyDown","post_id","addComment","handleAddLike","isPostLikedByUser","likes","includes","comments","onKeyDown","Comment","handleAddCommentLike","createdAt","Chat","setupConnections","socketConnection","socket","self","on","emit","user_email","userEmail","chatroom","messages","messageObject","typedMessage","handleSubmit","toggleClass","currentState","open","io","height","PrivateRoute","privateRouteProps","path","component","render","App","jwtDecode","authenticateUser","exact","initialAuthState","initialProfileState","initialFriendsState","initialSearchState","combineReducers","action","newPostArray","newArray","postArr","commentArr","concat","newArr","filter","store","createStore","reducer","applyMiddleware","thunk","logger","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"+OAAMA,EAAW,iCAEJC,EACJ,2BAASD,EAAT,iBADIC,EAEH,2BAASD,EAAT,kBAFGC,EAGE,2BAASD,EAAT,gBAHFC,EAIC,eAACC,EAAD,uDAAQ,EAAGC,EAAX,uDAAmB,GAAnB,gBACPH,EADO,uBACgBE,EADhB,kBAC8BC,IAL/BF,EAME,SAACG,GAAD,gBAAeJ,EAAf,kBAAiCI,IANnCH,EAOE,2BAASD,EAAT,mCAPFC,EAQA,SAACG,GAAD,gBACNJ,EADM,iDAC2CI,IAT3CH,EAUG,SAACG,GAAD,gBACTJ,EADS,iDACwCI,IAX3CH,EAYC,2BAASD,EAAT,kBAZDC,EAaI,2BAASD,EAAT,cAbJC,EAcC,SAACI,EAAIC,GAAL,gBACPN,EADO,qCAC8BK,EAD9B,0BACkDC,IAfnDL,EAgBC,SAACM,GAAD,gBAAmBP,EAAnB,8BAAiDO,IClBxD,SAASC,EAAYC,GAC1BC,QAAQC,IAAI,SAAUF,GAEtB,IAAIG,EAAW,GAEf,IAAK,IAAIC,KAAYJ,EAAQ,CAC3B,IAAMK,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmBN,EAAOI,IAE/CD,EAASK,KAAKH,EAAa,IAAME,GAGnC,OADAN,QAAQC,IAAI,WAAYC,EAASM,KAAK,MAC/BN,EAASM,KAAK,KAIhB,SAASC,IACd,OAAOC,aAAaC,QAAQ,SCLvB,SAASC,IACd,OAAO,SAACC,GACN,IAAMC,EAAMvB,IAEZwB,MAAMD,GACHE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLnB,QAAQC,IAAI,OAAQkB,GACpBN,EAOC,CACLO,KC5BwB,eD6BxBC,MATyBF,EAAKA,KAAKE,YAuGhC,SAASC,EAAS3B,EAAIC,EAAUF,EAAQ6B,GAC7C,OAAO,SAACV,GACN,IAAMC,EAAMvB,EAAmBI,EAAIC,GAEnCmB,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,QAG1BO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,QAAQC,IAAI,YAAakB,GAErBA,EAAKQ,SAELd,EADe,SAAbjB,EAlCP,SAAuB2B,EAAQ7B,GACpC,MAAO,CACL0B,KC/D6B,oBDgE7BG,SACA7B,UA+BiBkC,CAAcjC,EAAID,GA1BhC,SAA0BmC,EAAWnC,EAAQ6B,GAClD,MAAO,CACLH,KCvEgC,uBDwEhCS,YACAnC,SACA6B,UAuBiBO,CAAiBnC,EAAID,EAAQ6B,Q,IE1I5CQ,E,uKACM,IACAV,EAAUW,KAAKC,MAAfZ,MAER,OADArB,QAAQC,IAAI,QAAS+B,KAAKC,OAExB,yBAAKC,UAAU,cACb,kBAAC,GAAD,MACCb,EAAMc,KAAI,SAACC,GAAD,OACT,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,IAAKD,EAAKE,c,GARdC,aA0BTC,mBAXf,SAAyBC,GACvB,MAAO,CACLpB,MAAOoB,EAAMpB,SASFmB,CAAyBT,GCzBjC,SAASW,EAAkBC,GAChC,MAAO,CACLvB,KFyCsC,6BExCtCuB,SAWG,SAASC,EAAW/C,GACzB,OAAO,SAACgB,GACN,IAAMC,EAAMvB,EAAmBM,GAE/BkB,MAAMD,EAAK,CACTW,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,QAG1BO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,QAAQC,IAAI,cAAekB,GAEvBA,EAAKQ,QACPd,EAAS6B,EAAkBvB,EAAKA,KAAKwB,QAGvC9B,EAAS6B,EAAkB,S,ICjC7BG,E,4MAEJC,OAAS,WACPpC,aAAaqC,WAAW,SACxB,EAAKd,MAAMpB,SC2HN,CACLO,KJrHmB,a,EGHrB4B,aAAe,SAACC,GACd,IAAMpD,EAAaoD,EAAEC,OAAOC,MAE5B,EAAKlB,MAAMpB,SAAS+B,EAAW/C,K,uDAGvB,IAAD,EACkBmC,KAAKC,MAAtBmB,EADD,EACCA,KACAC,EAFD,EACOC,OACND,QACR,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMqB,GAAG,KACP,yBACEC,IAAI,4DACJC,IAAI,WAIV,yBAAKvB,UAAU,oBACb,yBACEA,UAAU,cACVsB,IAAI,sDACJC,IAAI,gBAEN,2BAAOC,YAAY,SAASC,SAAU3B,KAAKgB,eAE1CK,EAAQO,OAAS,GAChB,yBAAK1B,UAAU,kBACb,4BACGmB,EAAQlB,KAAI,SAAC0B,GAAD,OACX,kBAAC,IAAD,CAAMN,GAAE,gBAAWM,EAAKvB,MACtB,wBAAIJ,UAAU,qBAAqBG,IAAKwB,EAAKvB,KAC3C,yBACEkB,IAAI,wDACJC,IAAI,YAEN,8BAAOI,EAAKC,cAQ1B,yBAAK5B,UAAU,aACZkB,EAAKW,YACJ,yBAAK7B,UAAU,QACb,kBAAC,IAAD,CAAMqB,GAAG,aACP,yBACEC,IAAI,wDACJC,IAAI,UACJ9D,GAAG,aAGP,8BAAOyD,EAAKS,KAAKC,OAIrB,yBAAK5B,UAAU,aACb,6BACIkB,EAAKW,YACL,4BACE,kBAAC,IAAD,CAAMR,GAAG,UAAT,UAGHH,EAAKW,YAAc,wBAAIC,QAAShC,KAAKc,QAAlB,WAElBM,EAAKW,YACL,4BACE,kBAAC,IAAD,CAAMR,GAAG,WAAT,qB,GA9EGU,IAAM1B,WAgGZC,mBAPR,SAAyBC,GAC9B,MAAO,CACLW,KAAMX,EAAMW,KACZE,OAAQb,EAAMa,UAIHd,CAAyBK,GEpFzBqB,E,uKAdH,IAAD,EACgClC,KAAKC,MAApCZ,EADD,EACCA,MAAO8C,EADR,EACQA,QAASJ,EADjB,EACiBA,WAExB,OADA/D,QAAQC,IAAI,QAAS+B,KAAKC,OAExB,yBAAKC,UAAU,QACb,kBAAC,EAAD,CAAWb,MAAOA,IAEjB0C,GAAc,kBAAC,GAAD,CAAYI,QAASA,IACnCJ,GAAc,kBAAC,GAAD,W,GATJxB,aCOJ6B,MARf,SAAiBnC,GACf,OACE,6BACE,yDCCAoC,E,kDACJ,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAQRqC,qBAAuB,WACrB,EAAKrC,MAAMpB,SH0HN,CACLO,KJxH4B,sBObX,EAanBmD,kBAAoB,SAACtB,GAEnB,EAAKuB,SAAS,CACZC,MAAOxB,EAAEC,OAAOC,SAhBD,EAoBnBuB,qBAAuB,SAACzB,GAEtB,EAAKuB,SAAS,CACZG,SAAU1B,EAAEC,OAAOC,SAvBJ,EA2BnByB,iBAAmB,SAAC3B,GAClBA,EAAE4B,iBAGF7E,QAAQC,IAAI,EAAKwC,OAJO,MAKI,EAAKA,MAAzBgC,EALgB,EAKhBA,MAAOE,EALS,EAKTA,SAEXF,GAASE,GACX,EAAK1C,MAAMpB,SHLV,SAAe4D,EAAOE,GAC3B,OAAO,SAAC9D,GACNA,EArBK,CACLO,KJbuB,gBIkCvB,IAAMN,EAAMvB,IAEZwB,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAGlBqD,KAAMhF,EAAY,CAAE2E,QAAOE,eAE1B3D,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGL,GAFAnB,QAAQC,IAAI,OAAQkB,GAEhBA,EAAKQ,QAIP,OAFAjB,aAAaqE,QAAQ,QAAS5D,EAAKA,KAAK6D,YACxCnE,GA3BmBgD,EA2BG1C,EAAKA,KAAK0C,KA1BjC,CACLzC,KJzByB,gBI0BzByC,UAHG,IAAsBA,EA8BrBhD,EApCC,CACLO,KJjBwB,eIkBxB6D,MAkCyB9D,EAAK+D,cGlBRC,CAAMV,EAAOE,KA/BnC,EAAKlC,MAAQ,CACXgC,MAAO,GACPE,SAAU,IANK,E,qDAuCT,IAAD,EACmC3C,KAAKC,MAAMmB,KAA7C6B,EADD,EACCA,MAAOG,EADR,EACQA,WAAYrB,EADpB,EACoBA,WAKnBsB,GAASrD,KAAKC,MAAMqD,SAAS7C,OAAS,CAAE4C,KAAM,CAAEE,SAAU,OAA1DF,KAER,OAAItB,EAEK,kBAAC,IAAD,CAAUR,GAAI8B,IAGrB,0BAAMnD,UAAU,cACd,0BAAMA,UAAU,uBAAhB,UACC+C,GAAS,yBAAK/C,UAAU,sBAAsB+C,GAC/C,yBAAK/C,UAAU,SACb,2BACEd,KAAK,QACLsC,YAAY,QACZ8B,UAAQ,EAER7B,SAAU3B,KAAKuC,kBACfpB,MAAOnB,KAAKS,MAAMgC,SAGtB,yBAAKvC,UAAU,SACb,2BACEd,KAAK,WACLsC,YAAY,WACZ8B,UAAQ,EAER7B,SAAU3B,KAAK0C,qBACfvB,MAAOnB,KAAKS,MAAMkC,YAGtB,yBAAKzC,UAAU,SACZkD,EACC,4BAAQpB,QAAShC,KAAK4C,iBAAkBa,SAAUL,GAAlD,iBAIA,4BAAQpB,QAAShC,KAAK4C,iBAAkBa,SAAUL,GAAlD,gB,GAlFQ7C,aAiGLC,mBALf,SAAyBC,GACvB,MAAO,CACLW,KAAMX,EAAMW,QAGDZ,CAAyB6B,GCjGlCqB,E,kDACJ,WAAYzD,GAAQ,IAAD,8BACjB,cAAMA,IAWRqC,qBAAuB,WACrB,EAAKrC,MAAMpB,SJuHN,CACLO,KJxH4B,sBQbX,EAgBnBuE,qBAAuB,SAAC1C,GAEtB,EAAKuB,SAAS,CACZV,KAAMb,EAAEC,OAAOC,SAnBA,EAuBnBoB,kBAAoB,SAACtB,GAEnB,EAAKuB,SAAS,CACZC,MAAOxB,EAAEC,OAAOC,SA1BD,EA8BnBuB,qBAAuB,SAACzB,GAEtB,EAAKuB,SAAS,CACZG,SAAU1B,EAAEC,OAAOC,SAjCJ,EAqCnByC,4BAA8B,SAAC3C,GAE7B,EAAKuB,SAAS,CACZqB,gBAAiB5C,EAAEC,OAAOC,SAxCX,EA2CnByB,iBAAmB,SAAC3B,GAClBA,EAAE4B,iBAGF7E,QAAQC,IAAI,EAAKwC,OAJO,MAK2B,EAAKA,MAAhDgC,EALgB,EAKhBA,MAAOE,EALS,EAKTA,SAAUb,EALD,EAKCA,KAAM+B,EALP,EAKOA,gBAE3BpB,GAASE,GAAYb,GAAQ+B,GAE/B,EAAK5D,MAAMpB,SJ2BV,SAAgBiD,EAAMW,EAAOE,EAAUkB,GAK5C,OAAO,SAAChF,GACNA,EAzBK,CACLO,KJxDwB,iBIiFxBpB,QAAQC,IAAI,SACZ,IAAMa,EAAMvB,IACZS,QAAQC,IAAIa,GAEZC,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBqD,KAAMhF,EAAY,CAChBgE,OACAW,QACAE,WACAmB,iBAAkBD,MAGnB7E,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGL,GAFAnB,QAAQC,IAAI,cAAekB,GAEvBA,EAAKQ,QAKP,OAHA3B,QAAQC,IAAI,SACZS,aAAaqE,QAAQ,QAAS5D,EAAKA,KAAK6D,YACxCnE,GAtCoBgD,EAsCG1C,EAAKA,KAAK0C,KArClC,CACLzC,KJpE0B,iBIqE1ByC,UAHG,IAAuBA,EAyCtBhD,EA/CC,CACLO,KJ5DyB,gBI6DzB6D,MA6C0B9D,EAAK+D,cI7DTa,CAAOjC,EAAMW,EAAOE,EAAUkB,KAhDpD,EAAKpD,MAAQ,CACXqB,KAAM,GACNW,MAAO,GACPE,SAAU,GACVkB,gBAAiB,IARF,E,qDAwDT,IAAD,EACmC7D,KAAKC,MAAMmB,KAA7C6B,EADD,EACCA,MAAOG,EADR,EACQA,WACf,OAFO,EACoBrB,WAGlB,kBAAC,IAAD,CAAUR,GAAG,MAGpB,0BAAMrB,UAAU,cACd,0BAAMA,UAAU,uBAAhB,WACC+C,GAAS,yBAAK/C,UAAU,sBAAsB+C,GAC/C,yBAAK/C,UAAU,SACb,2BACEd,KAAK,OACLsC,YAAY,OACZ8B,UAAQ,EACR7B,SAAU3B,KAAK2D,qBACfxC,MAAOnB,KAAKS,MAAMqB,QAGtB,yBAAK5B,UAAU,SACb,2BACEd,KAAK,QACLsC,YAAY,QACZ8B,UAAQ,EACR7B,SAAU3B,KAAKuC,kBACfpB,MAAOnB,KAAKS,MAAMgC,SAGtB,yBAAKvC,UAAU,SACb,2BACEd,KAAK,WACLsC,YAAY,WACZ8B,UAAQ,EACR7B,SAAU3B,KAAK0C,qBACfvB,MAAOnB,KAAKS,MAAMkC,YAGtB,yBAAKzC,UAAU,SACb,2BACEd,KAAK,WACLsC,YAAY,mBACZ8B,UAAQ,EACR7B,SAAU3B,KAAK4D,4BACfzC,MAAOnB,KAAKS,MAAMoD,mBAGtB,yBAAK3D,UAAU,SACb,4BAAQ8B,QAAShC,KAAK4C,iBAAkBa,SAAUL,GAAlD,iB,GAxGW7C,aAuHNC,mBANf,YACE,MAAO,CACLY,KAF+B,EAARA,QAMZZ,CAAyBkD,G,QCzHlCM,E,kDACJ,WAAY/D,GAAQ,IAAD,8BACjB,cAAMA,IAWRgE,aAAe,SAACC,EAAW/C,GACzB,EAAKqB,SAAL,eACG0B,EAAY/C,KAdE,EAmBnBgD,aAAe,WAAO,IAAD,EACyB,EAAK1D,MAAzCqB,EADW,EACXA,KAAMa,EADK,EACLA,SAAUkB,EADL,EACKA,gBAChBhC,EAAS,EAAK5B,MAAMmB,KAApBS,KACR,EAAK5B,MAAMpB,SLmIR,SAAkBiD,EAAMa,EAAUkB,EAAiBnG,GACxD,OAAO,SAACmB,GAEN,IAAMC,EAAMvB,IAEZwB,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,MAE3BqE,KAAMhF,EAAY,CAChBgE,OACAa,WACAmB,iBAAkBD,EAClBlG,GAAID,MAGLsB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,IACLnB,QAAQC,IAAI,oBAAqBkB,GAE7BA,EAAKQ,UAEPd,EArCD,CACLO,KJ3HgC,uBI4HhCyC,KAmCkC1C,EAAKA,KAAK0C,OAClC1C,EAAKA,KAAK6D,QACZtE,aAAaqE,QAAQ,QAAS5D,EAAKA,KAAK6D,OAI5CnE,EApCC,CACLO,KJjI4B,mBIkI5B6D,MAkC4B9D,EAAK+D,cKjKbkB,CAAStC,EAAMa,EAAUkB,EAAiBhC,EAAKvB,OAtBlD,EA0BnBgC,qBAAuB,WACrB,EAAKrC,MAAMpB,SL2GN,CACLO,KJxH4B,sBSZ5B,EAAKqB,MAAQ,CACXqB,KAAM7B,EAAMmB,KAAKS,KAAKC,KACtBa,SAAU,GACVkB,gBAAiB,GACjBQ,UAAU,GAPK,E,qDA8BT,IAAD,SACiBrE,KAAKC,MAAMmB,KAA3BS,EADD,EACCA,KAAMoB,EADP,EACOA,MAGNoB,EAAarE,KAAKS,MAAlB4D,SACR,OACE,yBAAKnE,UAAU,YACb,yBAAKA,UAAU,iBACb,yBACEsB,IAAI,wDACJC,IAAI,aAIPwB,GAAS,yBAAK/C,UAAU,sBAAsB+C,IACpC,IAAVA,GACC,yBAAK/C,UAAU,wBAAf,gCAIF,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eAAf,SACA,yBAAKA,UAAU,eAAe2B,EAAKY,QAGrC,yBAAKvC,UAAU,SACb,yBAAKA,UAAU,eAAf,QACCmE,EACC,2BACEjF,KAAK,OACLuC,SAAU,SAACV,GAAD,OAAO,EAAKgD,aAAa,OAAQhD,EAAEC,OAAOC,QACpDA,MAAOnB,KAAKS,MAAMqB,OAGpB,yBAAK5B,UAAU,eAAe2B,EAAKC,OAItCuC,GACC,yBAAKnE,UAAU,SACb,yBAAKA,UAAU,eAAf,gBACA,2BACEd,KAAK,WACLsC,YAAY,WACZC,SAAU,SAACV,GAAD,OAAO,EAAKgD,aAAa,WAAYhD,EAAEC,OAAOC,QACxDA,MAAOnB,KAAKS,MAAMkC,YAKvB0B,GACC,yBAAKnE,UAAU,SACb,yBAAKA,UAAU,eAAf,oBACA,2BACEd,KAAK,WACLsC,YAAY,mBACZC,SAAU,SAACV,GAAD,OACR,EAAKgD,aAAa,kBAAmBhD,EAAEC,OAAOC,QAEhDA,MAAOnB,KAAKS,MAAMoD,mBAKxB,yBAAK3D,UAAU,WACZmE,EACC,4BAAQnE,UAAU,kBAAkB8B,QAAShC,KAAKmE,cAAlD,QAIA,4BACEjE,UAAU,kBACV8B,QAAS,kBAAM,EAAKiC,aAAa,YAAY,KAF/C,gBAODI,GACC,yBACEnE,UAAU,UACV8B,QAAS,kBAAM,EAAKiC,aAAa,YAAY,KAF/C,iB,GA7GWhC,IAAM1B,WA+HdC,mBALf,YACE,MAAO,CACLY,KAF+B,EAARA,QAKZZ,CAAyBwD,G,yBCvGjC,SAASM,EAAiB5G,GAC/B,OAAO,SAACmB,GACNA,EAPK,CACLO,KVK8B,uBUG9B,IAAMN,EAAMvB,EAAoBG,GAChCqB,MAAMD,EAAK,CACTW,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,QAG1BO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,IACLnB,QAAQC,IAAI,qBAAsBkB,GAG9BA,EAAKQ,SACPd,EApCD,CACLO,KViBgC,uBUhBhCyC,KAkCkC1C,EAAKA,KAAK0C,OAGxChD,EAhCC,CACLO,KVWgC,uBUVhC6D,MA8BgC9D,EAAK+D,cCKlC,SAASqB,EAAc7G,GAC5B,MAAO,CACL0B,KXlByB,gBWmBzB1B,U,ICjDE8G,E,kDACJ,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IAgCRwE,kBAAoB,WAAM,IAEhBtC,EAAY,EAAKlC,MAAjBkC,QAEFzE,EAAS,EAAKuC,MAAMyE,MAAM3G,OAAOL,OAMvC,OAAe,IAHDyE,EAAQhC,KAAI,SAACwE,GAAD,OAAYA,EAAOC,QAAQtE,OAAKuE,QAAQnH,IAxCjD,EAkDnBoH,gBAlDmB,sBAkDD,oCAAAC,EAAA,6DACVrH,EAAS,EAAKuC,MAAMyE,MAAM3G,OAAOL,OACvCM,QAAQC,IAAI,SAAUP,GAChBoB,EAAMvB,EAAkBG,GACxBsH,EAAS,CACbxF,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,OARb,SAYOM,MAAMD,EAAKkG,GAZlB,cAYV/F,EAZU,gBAaGA,EAASC,OAbZ,OAaVC,EAbU,OAchBnB,QAAQC,IAAI,MAAOa,EAAKK,GACpBA,EAAKQ,SACP3B,QAAQC,IAAI,cAAekB,GAC3B,EAAKqD,SAAS,CACZ7C,SAAS,EACTsF,WAAY,+BAEd,EAAKhF,MAAMpB,SDhCR,CACLO,KXZsB,aWatBuF,OC8BiCxF,EAAKA,KAAK+F,eAEzClH,QAAQC,IAAI,oBAAqBkB,GACjC,EAAKqD,SAAS,CACZ7C,QAAS,KACTsD,MAAO9D,EAAK+D,WA1BA,4CAlDC,EAkFnBiC,mBAlFmB,sBAkFE,oCAAAJ,EAAA,6DACbrH,EAAS,EAAKuC,MAAMyE,MAAM3G,OAAOL,OAEjCoB,EAAMvB,EAAqBG,GAC3B0H,EAAU,CACd5F,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,OARV,SAYIM,MAAMD,EAAKsG,GAZf,cAYbnG,EAZa,gBAaAA,EAASC,OAbT,OAabC,EAba,OAcnBnB,QAAQC,IAAI,cAAekB,GAEvBA,EAAKQ,SACP,EAAK6C,SAAS,CACZ7C,SAAS,EACTsF,WAAY,gCAEd,EAAKhF,MAAMpB,SAAS0F,EAAc7G,KAElC,EAAK8E,SAAS,CACZ7C,QAAS,KACTsD,MAAO9D,EAAK+D,UAzBG,4CAhFnB,EAAKzC,MAAQ,CACXd,QAAS,KACTsD,MAAO,KACPgC,WAAY,MALG,E,gEASE,IACXP,EAAU1E,KAAKC,MAAfyE,MAEJA,EAAM3G,OAAOL,QACfsC,KAAKC,MAAMpB,SAASyF,EAAiBI,EAAM3G,OAAOL,W,yCAKnC2H,GAAY,IAEVC,EACfD,EADFX,MAAS3G,OAIQwH,EACfvF,KAAKC,MADPyE,MAAS3G,OAGPuH,GAAcC,GAAcD,EAAW5H,SAAW6H,EAAW7H,QAC/DsC,KAAKC,MAAMpB,SAASyF,EAAiBiB,EAAW7H,W,+BAoF1C,IAAD,EAIHsC,KAAKC,MAFElC,EAFJ,EAEL2G,MAAS3G,OACTyH,EAHK,EAGLA,QAEM3D,EAAS2D,EAAT3D,KAER7D,QAAQC,IAAI,cAAe+B,KAAKC,OAChCjC,QAAQC,IAAI,oBAAqBF,GAR1B,MAUgCiC,KAAKS,MAApCd,EAVD,EAUCA,QAASsD,EAVV,EAUUA,MAAOgC,EAVjB,EAUiBA,WAClBQ,EAAiBzF,KAAKyE,oBAE5B,OAAIe,EAAQpC,WACH,wCAIP,yBAAKlD,UAAU,YACb,yBAAKA,UAAU,iBACb,yBACEsB,IAAI,wDACJC,IAAI,aAIP9B,GAAW,yBAAKO,UAAU,wBAAwB+E,GAClDhC,GAAS,yBAAK/C,UAAU,sBAAsB+C,GAE/C,yBAAK/C,UAAU,SACb,yBAAKA,UAAU,eAAf,QACA,yBAAKA,UAAU,eAAe2B,EAAKC,OAGrC,yBAAK5B,UAAU,SACb,yBAAKA,UAAU,eAAf,SACA,yBAAKA,UAAU,eAAe2B,EAAKY,QAGrC,yBAAKvC,UAAU,YACXuF,GACA,4BAAQvF,UAAU,kBAAkB8B,QAAShC,KAAK8E,iBAAlD,cAIDW,GACC,4BACEvF,UAAU,kBACV8B,QAAShC,KAAKmF,oBAFhB,uB,GA/JclD,IAAM1B,WAkLjBC,mBANf,YACE,MAAO,CACLgF,QAF2C,EAApBA,QAGvBrD,QAH2C,EAAXA,WAMrB3B,CAAyBgE,GCrKzBkB,MAjBf,SAAwBzF,GACtB,OACE,6BAEE,kBAAC,IAAD,CAAMC,UAAU,eAAeqB,GAAE,eAAUtB,EAAM0E,OAAOrE,MACtD,yBAAKJ,UAAU,eACb,yBACEsB,IAAI,wDACJC,IAAI,cAGR,yBAAKvB,UAAU,gBAAgBD,EAAM0E,OAAOlC,UCSrCkD,G,uKAnBH,IACAxD,EAAYnC,KAAKC,MAAjBkC,QACR,OACE,yBAAKjC,UAAU,gBACb,yBAAKA,UAAU,UAAf,WAECiC,GAA8B,IAAnBA,EAAQP,QAClB,yBAAK1B,UAAU,cAAf,qBAGDiC,GACCA,EAAQhC,KAAI,SAACwE,GAAD,OACV,kBAAC,EAAD,CAAgBA,OAAQA,EAAOC,QAASvE,IAAKsE,EAAOrE,c,GAbvC2B,IAAM1B,WCCzBqF,G,kDACJ,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IAMRgE,aAAe,SAAChD,GACd,EAAKuB,SAAS,CACZqD,QAAS5E,EAAEC,OAAOC,SATH,EAcnB2E,cAAgB,WhByBX,IAAoBD,EgBxBvB,EAAK5F,MAAMpB,UhBwBYgH,EgBxBQ,EAAKpF,MAAMoF,QhByBrC,SAAChH,GACN,IAAMC,EAAMvB,IAEZwB,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,MAE3BqE,KAAMhF,EAAY,CAAE+H,cAEnB7G,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,QAAQC,IAAI,cAAekB,GAEvBA,EAAKQ,SACPd,EAxBD,CACLO,KCEoB,WDDpBgB,KAsBuBjB,EAAKA,KAAKiB,agBxCjC,EAAKoC,SAAS,CACZqD,QAAS,MAfX,EAAKpF,MAAQ,CACXoF,QAAS,IAHM,E,qDAsBjB,OACE,yBAAK3F,UAAU,eACb,8BACEA,UAAU,WACViB,MAAOnB,KAAKS,MAAMoF,QAClBlE,SAAU3B,KAAKiE,eAGjB,6BACE,4BAAQtG,GAAG,eAAeqE,QAAShC,KAAK8F,eAAxC,kB,GAhCe7D,IAAM1B,WA0ChBC,iBAAUoF,ICxCnBG,G,kDACJ,WAAY9F,GAAQ,IAAD,8BACjB,cAAMA,IAORgE,aAAe,SAAChD,GACd,EAAKuB,SAAS,CACZwD,QAAS/E,EAAEC,OAAOC,SAVH,EAenB8E,cAAgB,SAAChF,GAAO,IjBwDI4E,EAAStG,EiBvD3Ba,EAAS,EAAKH,MAAdG,KACA4F,EAAY,EAAKvF,MAAjBuF,QAEM,UAAV/E,EAAEZ,MAGJ,EAAKJ,MAAMpB,UjBiDagH,EiBjDUG,EjBiDDzG,EiBjDUa,EAAKE,IjBkD7C,SAACzB,GACN,IAAMC,EAAMvB,IAEZwB,MAAMD,EAAK,CACTU,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,MAE3BqE,KAAMhF,EAAY,CAChBoI,QAAS3G,EACTsG,cAGD7G,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,QAAQC,IAAI,iBAAkBkB,GAE1BA,EAAKQ,SACPd,EA5BH,SAAoBmH,EAASzG,GAClC,MAAO,CACLH,KC7BuB,cD8BvB4G,UACAzG,UAwBe4G,CAAWhH,EAAKA,KAAK6G,QAASzG,UiBpE3C,EAAKiD,SAAS,CACZwD,QAAS,OAxBI,EA8BnBI,cAAgB,WAAO,IAAD,EACG,EAAKnG,MAApBG,EADY,EACZA,KAAMyB,EADM,EACNA,KACd,EAAK5B,MAAMpB,SAASS,EAASc,EAAKE,IAAK,OAAQuB,EAAKvB,OA9BpD,EAAKG,MAAQ,CACXuF,QAAS,IAHM,E,qDAmCT,IAAD,EACgBhG,KAAKC,MAApBG,EADD,EACCA,KAAMyB,EADP,EACOA,KAGRwE,EAAoBjG,EAAKkG,MAAMC,SAAS1E,EAAKvB,KAEnD,OACE,yBAAKJ,UAAU,eAAeG,IAAKD,EAAKE,KACtC,yBAAKJ,UAAU,eACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAMqB,GAAE,gBAAWnB,EAAKyB,KAAKvB,MAC3B,yBACEkB,IAAI,wDACJC,IAAI,cAGR,6BACE,0BAAMvB,UAAU,eAAeE,EAAKyB,KAAKC,MACzC,0BAAM5B,UAAU,aAAhB,kBAGJ,yBAAKA,UAAU,gBAAgBE,EAAKyF,SAEpC,yBAAK3F,UAAU,gBACb,4BAAQA,UAAU,mBAAmB8B,QAAShC,KAAKoG,eAChDC,EACC,yBACE7E,IAAI,wDACJC,IAAI,cAGN,yBACED,IAAI,wDACJC,IAAI,eAGR,8BAAOrB,EAAKkG,MAAM1E,SAGpB,yBAAK1B,UAAU,sBACb,yBACEsB,IAAI,wDACJC,IAAI,kBAEN,8BAAOrB,EAAKoG,SAAS5E,UAGzB,yBAAK1B,UAAU,oBACb,2BACEwB,YAAY,yBACZC,SAAU3B,KAAKiE,aACfwC,UAAWzG,KAAKiG,cAChB9E,MAAOnB,KAAKS,MAAMuF,WAItB,yBAAK9F,UAAU,sBACZE,EAAKoG,SAASrG,KAAI,SAAC6F,GAAD,OACjB,kBAAC,GAAD,CAASzG,OAAQa,EAAKE,IAAK0F,QAASA,EAAS3F,IAAK2F,EAAQ1F,gB,GA9FrD2B,IAAM1B,WA6GVC,oBANf,YACE,MAAO,CACLqB,KAF+B,EAART,KAEZS,QAIArB,CAAyBuF,IC/GlCW,G,4MAEJC,qBAAuB,WAAO,IAAD,EACO,EAAK1G,MAA/B+F,EADmB,EACnBA,QAASnE,EADU,EACVA,KAAMtC,EADI,EACJA,OACvB,EAAKU,MAAMpB,SAASS,EAAS0G,EAAQ1F,IAAK,UAAWuB,EAAKvB,IAAKf,K,uDAGvD,IACAyG,EAAYhG,KAAKC,MAAjB+F,QAER,OACE,yBAAK9F,UAAU,qBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,uBAAuB8F,EAAQnE,KAAKC,MACpD,0BAAM5B,UAAU,qBAAqB8F,EAAQY,WAC7C,0BAAM1G,UAAU,sBACb8F,EAAQM,MAAM1E,OACf,4BAAQ1B,UAAU,UAAU8B,QAAShC,KAAK2G,sBAA1C,WAMJ,yBAAKzG,UAAU,wBAAwB8F,EAAQH,c,GAvBjC5D,IAAM1B,WAmCbC,oBANf,YACE,MAAO,CACLqB,KAF+B,EAART,KAEZS,QAIArB,CAAyBkG,I,8CClClCG,G,kDACJ,WAAY5G,GAAQ,IAAD,8BACjB,cAAMA,IAkBR6G,iBAAmB,WACjB,IAAMC,EAAmB,EAAKC,OACxBC,EAAI,gBAEV,EAAKD,OAAOE,GAAG,WAAW,WACxBlJ,QAAQC,IAAI,0BAEZ8I,EAAiBI,KAAK,YAAa,CACjCC,WAAYpH,KAAKqH,UACjBC,SAAU,YAGZP,EAAiBG,GAAG,eAAe,SAAU/H,UAK/C,EAAK6H,OAAOE,GAAG,mBAAmB,SAAU/H,GAAM,IAExCoI,EAAaN,EAAKxG,MAAlB8G,SACFC,EAAgB,GACtBA,EAAc3B,QAAU1G,EAAK+D,QAEzB/D,EAAKiI,aAAeH,EAAKI,YAC3BG,EAAcP,MAAO,GAGvBA,EAAKzE,SAAS,CACZ+E,SAAS,GAAD,oBAAMA,GAAN,CAAgBC,IACxBC,aAAc,SAhDD,EAsDnBC,aAAe,WAAO,IACZD,EAAiB,EAAKhH,MAAtBgH,aAEJA,GAAgB,EAAKJ,WACvB,EAAKL,OAAOG,KAAK,eAAgB,CAC/BjE,QAASuE,EACTL,WAAY,EAAKC,UACjBC,SAAU,aA7DG,EAmEnBK,YAAc,WACZ,IAAMC,EAAe,EAAKnH,MAAMoH,KAChC,EAAKrF,SAAS,CAAEqF,MAAOD,KAlEvB,EAAKnH,MAAQ,CACX8G,SAAU,GACVE,aAAc,GACdI,MAAM,GAIR,EAAKb,OAASc,KAAGtH,QAAQ,6BACzB,EAAK6G,UAAYpH,EAAM4B,KAAKY,MAExB,EAAK4E,WACP,EAAKP,mBAdU,E,qDAwET,IAAD,SAC4B9G,KAAKS,MAAhC8G,EADD,EACCA,SAAUE,EADX,EACWA,aAClB,OACE,yBACEvH,UACEF,KAAKS,MAAMoH,KAAO,sBAAwB,wBAG5C,yBAAK3H,UAAU,eAAf,OAEGF,KAAKS,MAAMoH,KACV,yBACErG,IAAI,8DACJC,IAAI,GACJsG,OAAQ,GACR/F,QAAShC,KAAK2H,cAGhB,yBACEnG,IAAI,6DACJC,IAAI,GACJsG,OAAQ,GACR/F,QAAShC,KAAK2H,eAIpB,yBAAKzH,UAAU,iBACZqH,EAASpH,KAAI,SAAC+C,GAAD,OACZ,yBACEhD,UACEgD,EAAQ+D,KACJ,wBACA,0BAGL/D,EAAQ2C,aAIf,yBAAK3F,UAAU,eACb,2BACEd,KAAK,OACL+B,MAAOsG,EACP9F,SAAU,SAACV,GAAD,OAAO,EAAKuB,SAAS,CAAEiF,aAAcxG,EAAEC,OAAOC,WAE1D,4BAAQa,QAAShC,KAAK0H,cAAtB,gB,GAtHSnH,aAmIJC,oBANf,YACE,MAAO,CACLqB,KAF+B,EAART,KAEZS,QAIArB,CAAyBqG,I,SChHlCmB,GAAe,SAACC,GAAuB,IACnCC,EAA2CD,EAA3CC,KAAMnG,EAAqCkG,EAArClG,WAAuBxB,EAAc0H,EAAzBE,UAC1B,OACE,kBAAC,IAAD,CACED,KAAMA,EACNE,OAAQ,SAACnI,GACP,OAAO8B,EACL,kBAACxB,EAAcN,GAEf,kBAAC,IAAD,CACEsB,GAAI,CACFgC,SAAU,SACV9C,MAAO,CACL4C,KAAMpD,EAAMqD,iBAStB+E,G,kLAGFrI,KAAKC,MAAMpB,SAASD,KAGpB,IR7B6BlB,EQ6BvBsF,EAAQtE,aAAasE,MAC3B,GAAIA,EAAO,CACT,IAAMnB,EAAOyG,GAAUtF,GACvBhF,QAAQC,IAAI,OAAQ4D,GAEpB7B,KAAKC,MAAMpB,SfoEV,SAA0BgD,GAC/B,MAAO,CACLzC,KJ/G6B,oBIgH7ByC,QetEI0G,CAAiB,CACfjI,IAAKuB,EAAKvB,IACVwB,KAAMD,EAAKC,KACXW,MAAOZ,EAAKY,SAIhBzC,KAAKC,MAAMpB,UR1CgBnB,EQ0CUmE,EAAKvB,IRzCvC,SAACzB,GACN,IAAMC,EAAMvB,EAAoBG,GAEhCqB,MAAMD,EAAK,CACTW,QAAS,CACP,eAAgB,oCAChBC,cAAc,UAAD,OAAYjB,QAG1BO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,QAAQC,IAAI,eAAgBkB,GAExBA,EAAKQ,QACPd,EA5BD,CACLO,KXqBiC,wBWpBjC+C,QA0BmChD,EAAKA,KAAKgD,UAGzCtD,EAxBC,CACLO,KXeiC,wBWdjC6D,MAsBiC9D,EAAK+D,mB,+BQ4B/B,MAE0BlD,KAAKC,MAA9BZ,EAFD,EAECA,MAAO+B,EAFR,EAEQA,KAAMe,EAFd,EAEcA,QACrB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,OAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEqG,OAAK,EACLN,KAAK,IACLE,OAAQ,SAACnI,GACP,OACE,kBAAC,EAAD,iBACMA,EADN,CAEEZ,MAAOA,EACP8C,QAASA,EACTJ,WAAYX,EAAKW,iBAKzB,kBAAC,IAAD,CAAOmG,KAAK,SAASC,UAAW9F,IAChC,kBAAC,IAAD,CAAO6F,KAAK,UAAUC,UAAWzE,IACjC,kBAAC,GAAD,CACEwE,KAAK,YACLC,UAAWnE,EACXjC,WAAYX,EAAKW,aAEnB,kBAAC,GAAD,CACEmG,KAAK,gBACLC,UAAW3D,EACXzC,WAAYX,EAAKW,aAEnB,kBAAC,IAAD,CAAOoG,UAAW/F,U,GA3DVH,IAAM1B,WAgFTC,oBAbf,SAAyBC,GACvB,MAAO,CACLpB,MAAOoB,EAAMpB,MACb+B,KAAMX,EAAMW,KACZe,QAAS1B,EAAM0B,WASJ3B,CAAyB6H,I,0BChHxC,IAAMI,GAAmB,CACvB5G,KAAM,GACNE,YAAY,EACZqB,YAAY,EACZH,MAAO,MCZT,IAAMyF,GAAsB,CAC1B7G,KAAM,GACNuB,YAAY,EACZH,MAAO,KACPtD,QAAS,MCHX,IAAMgJ,GAAsB,GCL5B,IAAMC,GAAqB,CACzBvH,QAAS,ICMIwH,oBAAgB,CAC7BxJ,MCDa,WAAoC,IAArBoB,EAAoB,uDAAZ,GAAIqI,EAAQ,uCAChD,OAAQA,EAAO1J,MACb,IzBTwB,eyBUtB,OAAO0J,EAAOzJ,MAEhB,IzB0BoB,WyBzBlB,MAAM,CAAEyJ,EAAO1I,MAAf,oBAAwBK,IAE1B,IzB0BuB,cyBzBrB,IAAMsI,EAAetI,EAAMN,KAAI,SAACC,GAC9B,OAAIA,EAAKE,MAAQwI,EAAOvJ,OAEf,6BACFa,GADL,IAEEoG,SAAS,CAAEsC,EAAO9C,SAAV,oBAAsB5F,EAAKoG,aAGhCpG,KAET,OAAO2I,EAET,IzBgB6B,oByBf3B,IAAMC,EAAWvI,EAAMN,KAAI,SAACC,GAC1B,OAAIA,EAAKE,MAAQwI,EAAOvJ,OAEf,6BACFa,GADL,IAEEkG,MAAM,GAAD,oBAAMlG,EAAKkG,OAAX,CAAkBwC,EAAOpL,WAG3B0C,KAET,OAAO4I,EAET,IzBIgC,uByBH9B,IAAMC,EAAUxI,EAAMN,KAAI,SAACC,GACzB,GAAIA,EAAKE,MAAQwI,EAAOvJ,OAAQ,CAC9B,IAAM2J,EAAa9I,EAAKoG,SAASrG,KAAI,SAAC6F,GACpC,OAAIA,EAAQ1F,MAAQwI,EAAOjJ,UAClB,6BACFmG,GADL,IAEEM,MAAM,GAAD,oBAAMN,EAAQM,OAAd,CAAqBwC,EAAOpL,WAG9BsI,KAET,OAAO,6BACF5F,GADL,IAEEoG,SAAS,aAAK0C,KAGlB,OAAO9I,KAET,OAAO6I,EAET,QACE,OAAOxI,IDtDXW,KJUa,WAAiD,IAAnCX,EAAkC,uDAA1BgI,GAAkBK,EAAQ,uCAC7D,OAAQA,EAAO1J,MACb,IpBjBuB,coBkBvB,IpBZwB,eoBctB,OAAO,6BACFqB,GADL,IAEE2C,YAAY,IAEhB,IpBvByB,gBoBwBzB,IpBlB0B,iBoBmBxB,OAAO,6BACF3C,GADL,IAEEoB,KAAMiH,EAAOjH,KACbE,YAAY,EACZqB,YAAY,EACZH,MAAO,OAEX,IpB/BwB,eoBgCxB,IpB1ByB,gBoB2BvB,OAAO,6BACFxC,GADL,IAEE2C,YAAY,EACZH,MAAO6F,EAAO7F,QAGlB,IpB/B6B,oBoBgC3B,OAAO,6BACFxC,GADL,IAEEsB,YAAY,EACZF,KAAMiH,EAAOjH,OAGjB,IpBrCmB,UoBsCjB,OAAO,6BACFpB,GADL,IAEEoB,KAAM,GACNE,YAAY,IAGhB,IpBzC4B,mBoB0C1B,OAAO,6BACFtB,GADL,IAEEwC,MAAO,OAGX,IpB5CgC,uBoB6C9B,OAAO,6BACFxC,GADL,IAEEoB,KAAMiH,EAAOjH,KACboB,OAAO,IAGX,IpBlD4B,mBoBmD1B,OAAO,6BACFxC,GADL,IAEEwC,MAAO6F,EAAO7F,QAElB,QACE,OAAOxC,IIpEX+E,QHCa,WAAuD,IAAtC/E,EAAqC,uDAA7BiI,GAAqBI,EAAQ,uCACnE,OAAQA,EAAO1J,MACb,IrBYgC,uBqBX9B,OAAO,6BACFqB,GADL,IAEE2C,YAAY,EACZvB,KAAMiH,EAAOjH,KACblC,SAAS,IAEb,IrBMgC,uBqBL9B,OAAO,6BACFc,GADL,IAEE2C,YAAY,EACZH,MAAO6F,EAAO7F,QAGlB,IrBA8B,qBqBC5B,OAAO,6BACFxC,GADL,IAEE2C,YAAY,IAEhB,QACE,OAAO3C,IGtBX0B,QFJa,WAAuD,IAAtC1B,EAAqC,uDAA7BkI,GAAqBG,EAAQ,uCACnE,OAAQA,EAAO1J,MACb,ItBqBiC,wBsBpB/B,OAAO,aAAI0J,EAAO3G,SAEpB,ItBmBiC,wBsBlB/B,OAAO2G,EAAO7F,MAEhB,ItBmBsB,asBlBpB,OAAOxC,EAAM0I,OAAOL,EAAOnE,QAE7B,ItBiByB,gBsBhBvB,IAAMyE,EAAS3I,EAAM4I,QACnB,SAAC1E,GAAD,OAAYA,EAAOC,QAAQtE,MAAQwI,EAAOpL,UAE5C,OAAO0L,EAET,QACE,OAAO3I,IEbXa,ODRa,WAAqD,IAArCb,EAAoC,uDAA5BmI,GAAoBE,EAAQ,uCACjE,OAAQA,EAAO1J,MACb,IvB0CsC,6BuBzCpC,OAAO,6BACFqB,GADL,IAEEY,QAASyH,EAAOnI,QAEpB,QACE,OAAOF,M,oBGNb,IAAM6I,GCCIC,aAAYC,GAAQC,aAAgBC,KAAMC,ODApD3L,QAAQC,IAAI,QAASqL,GAAMM,YAC3BC,IAASzB,OACP,kBAAC,IAAD,CAAUkB,MAAOA,IACf,kBAAC,IAAMQ,WAAP,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,U","file":"static/js/main.7f6ce7d4.chunk.js","sourcesContent":["const API_ROOT = 'http://codeial.com:8000/api/v2';\n\nexport const APIUrls = {\n  login: () => `${API_ROOT}/users/login`,\n  signup: () => `${API_ROOT}/users/signup`,\n  editProfile: () => `${API_ROOT}/users/edit`,\n  fetchPosts: (page = 1, limit = 25) =>\n    `${API_ROOT}/posts?page=${page}&limit=${limit}`,\n  userProfile: (userId) => `${API_ROOT}/users/${userId}`,\n  userFriends: () => `${API_ROOT}/friendship/fetch_user_friends`,\n  addFriend: (userId) =>\n    `${API_ROOT}/friendship/create_friendship?user_id=${userId}`,\n  removeFriend: (userId) =>\n    `${API_ROOT}/friendship/remove_friendship?user_id=${userId}`,\n  createPost: () => `${API_ROOT}/posts/create`,\n  createComment: () => `${API_ROOT}/comments`,\n  toggleLike: (id, likeType) =>\n    `${API_ROOT}/likes/toggle?likeable_id=${id}&likeable_type=${likeType}`,\n  userSearch: (searchText) => `${API_ROOT}/users/search?text=${searchText}`,\n};\n","export function getFormBody(params) {\n  console.log('params', params);\n  //params ->data from login form\n  let formBody = [];\n\n  for (let property in params) {\n    const encodedKey = encodeURIComponent(property); // 'user name'=>'user&20name' (to convert it back)\n    const encodedValue = encodeURIComponent(params[property]); // 'kr 123'=>'kr&20123' (to convert it back)\n\n    formBody.push(encodedKey + '=' + encodedValue); //formBody=[\"username=krishan\" \"password=123\"]\n  }\n  console.log('formBody', formBody.join('&'));\n  return formBody.join('&'); // \"username=krishan&password=123\"\n}\n\n// getting token of user from local storage\nexport function getAuthTokenFromLocalStorage() {\n  return localStorage.getItem('token');\n}\n","import {\n  UPDATE_POSTS,\n  ADD_POST,\n  UPDATE_POST_LIKES,\n  UPDATE_COMMENT_LIKES,\n  ADD_COMMENT,\n} from './actionTypes';\nimport { APIUrls } from '../helper/urls';\nimport { getAuthTokenFromLocalStorage } from '../helper/utils';\nimport { getFormBody } from '../helper/utils';\n\n// fetching post from api\nexport function fetchPosts() {\n  return (dispatch) => {\n    const url = APIUrls.fetchPosts();\n\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log('data', data);\n        dispatch(updatePosts(data.data.posts));\n      });\n  };\n}\n\n// action to update posts\nexport function updatePosts(posts) {\n  return {\n    type: UPDATE_POSTS,\n    posts,\n  };\n}\n\n// add post\nexport function addPost(post) {\n  return {\n    type: ADD_POST,\n    post,\n  };\n}\n\n// create post\nexport function createPost(content) {\n  return (dispatch) => {\n    const url = APIUrls.createPost();\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n      body: getFormBody({ content }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('create Post', data);\n\n        if (data.success) {\n          dispatch(addPost(data.data.post));\n          return;\n        }\n        // dispatch();\n      });\n  };\n}\n\n// comments\nexport function addComment(comment, postId) {\n  return {\n    type: ADD_COMMENT,\n    comment,\n    postId,\n  };\n}\n\nexport function createComment(content, postId) {\n  return (dispatch) => {\n    const url = APIUrls.createComment();\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n      body: getFormBody({\n        post_id: postId,\n        content,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('create Comment', data);\n\n        if (data.success) {\n          dispatch(addComment(data.data.comment, postId));\n          return;\n        }\n        // dispatch();\n      });\n  };\n}\n\n// post like\nexport function addLikeToPost(postId, userId) {\n  return {\n    type: UPDATE_POST_LIKES,\n    postId,\n    userId,\n  };\n}\n\n// comments like\nexport function addLikeToComment(commentId, userId, postId) {\n  return {\n    type: UPDATE_COMMENT_LIKES,\n    commentId,\n    userId,\n    postId,\n  };\n}\n\nexport function addLikes(id, likeType, userId, postId) {\n  return (dispatch) => {\n    const url = APIUrls.toggleLike(id, likeType);\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('Like data', data);\n\n        if (data.success) {\n          if (likeType === 'Post') {\n            dispatch(addLikeToPost(id, userId));\n          } else {\n            dispatch(addLikeToComment(id, userId, postId));\n          }\n        }\n        // dispatch();\n      });\n  };\n}\n","// to export all the action types from a single file\n\nexport const UPDATE_POSTS = 'UPDATE_POSTS';\n\n//login actions\n\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\n\n//signup actions\n\nexport const SIGNUP_START = 'SIGNUP_START';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED';\n\nexport const AUTHENTICATE_USER = 'AUTHENTICATE_USER';\nexport const LOG_OUT = 'LOG_OUT';\n\n// clear states or unmount\nexport const CLEAR_AUTH_STATE = 'CLEAR_AUTH_STATE';\n\n// edit logged in user profile\nexport const EDIT_USER_SUCCESSFUL = 'EDIT_USER_SUCCESSFUL';\nexport const EDIT_USER_FAILED = 'EDIT_USER_FAILED';\n\n// post user profile\nexport const USER_PROFILE_SUCCESS = 'USER_PROFILE_SUCCESS';\nexport const USER_PROFILE_FAILURE = 'USER_PROFILE_FAILURE';\nexport const FETCH_USER_PROFILE = 'FETCH_USER_PROFILE';\n\n// friends\nexport const FETCH_FRIENDS_SUCCESS = 'FETCH_FRIENDS_SUCCESS';\nexport const FETCH_FRIENDS_FAILURE = 'FETCH_FRIENDS_FAILURE';\n\n//add friends\nexport const ADD_FRIEND = 'ADD_FRIEND';\nexport const REMOVE_FRIEND = 'REMOVE_FRIEND';\n\n// create post\nexport const ADD_POST = 'ADD_POST';\n\n// create comment\nexport const ADD_COMMENT = 'ADD_COMMENT';\n\n// likes\nexport const UPDATE_POST_LIKES = 'UPDATE_POST_LIKES';\nexport const UPDATE_COMMENT_LIKES = 'UPDATE_COMMENT_LIKES';\n\n// search\nexport const USER_SEARCH_RESULT_SUCCESS = 'USER_SEARCH_RESULT_SUCCESS';\nexport const USER_SEARCH_RESULT_FAILURE = 'USER_SEARCH_RESULT_FAILURE';\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { CreatePost } from './index';\nimport { connect } from 'react-redux';\nimport { Post } from './index';\n\nclass PostsList extends Component {\n  render() {\n    const { posts } = this.props;\n    console.log('post ', this.props);\n    return (\n      <div className=\"posts-list\">\n        <CreatePost />\n        {posts.map((post) => (\n          <Post post={post} key={post._id} />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.posts,\n  };\n}\n\n// to match the type of prop required\nPostsList.propTypes = {\n  posts: propTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps)(PostsList);\n","import {\n  USER_SEARCH_RESULT_SUCCESS,\n  USER_SEARCH_RESULT_FAILURE,\n} from './actionTypes';\nimport { APIUrls } from '../helper/urls';\nimport { getAuthTokenFromLocalStorage } from '../helper/utils';\n\nexport function userSearchSuccess(users) {\n  return {\n    type: USER_SEARCH_RESULT_SUCCESS,\n    users,\n  };\n}\n\nexport function userSearchFailure(error) {\n  return {\n    type: USER_SEARCH_RESULT_FAILURE,\n    error,\n  };\n}\n\nexport function userSearch(searchText) {\n  return (dispatch) => {\n    const url = APIUrls.userSearch(searchText);\n\n    fetch(url, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('Search data', data);\n\n        if (data.success) {\n          dispatch(userSearchSuccess(data.data.users));\n          return;\n        }\n        dispatch(userSearchSuccess([]));\n      });\n  };\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logOutUser } from '../actions/auth';\nimport { userSearch } from '../actions/search';\n\nclass Navbar extends React.Component {\n  // to logout user and remove token from localstorage\n  logOut = () => {\n    localStorage.removeItem('token');\n    this.props.dispatch(logOutUser());\n  };\n\n  // handle user search\n  handleSearch = (e) => {\n    const searchText = e.target.value;\n\n    this.props.dispatch(userSearch(searchText));\n  };\n\n  render() {\n    const { auth, search } = this.props;\n    const { results } = search;\n    return (\n      <nav className=\"nav\">\n        <div className=\"left-nav\">\n          <Link to=\"/\">\n            <img\n              src=\"https://ninjasfiles.s3.amazonaws.com/0000000000003454.png\"\n              alt=\"logo\"\n            />\n          </Link>\n        </div>\n        <div className=\"search-container\">\n          <img\n            className=\"search-icon\"\n            src=\"https://image.flaticon.com/icons/svg/483/483356.svg\"\n            alt=\"search-icon\"\n          />\n          <input placeholder=\"Search\" onChange={this.handleSearch} />\n\n          {results.length > 0 && (\n            <div className=\"search-results\">\n              <ul>\n                {results.map((user) => (\n                  <Link to={`/user/${user._id}`}>\n                    <li className=\"search-results-row\" key={user._id}>\n                      <img\n                        src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n                        alt=\"user-dp\"\n                      />\n                      <span>{user.name}</span>\n                    </li>\n                  </Link>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"right-nav\">\n          {auth.isLoggedIn && (\n            <div className=\"user\">\n              <Link to=\"/settings\">\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n                  alt=\"user-dp\"\n                  id=\"user-dp\"\n                />\n              </Link>\n              <span>{auth.user.name}</span>\n            </div>\n          )}\n\n          <div className=\"nav-links\">\n            <ul>\n              {!auth.isLoggedIn && (\n                <li>\n                  <Link to=\"/login\">LogIn</Link>\n                </li>\n              )}\n              {auth.isLoggedIn && <li onClick={this.logOut}>LogOut</li>}\n\n              {!auth.isLoggedIn && (\n                <li>\n                  <Link to=\"/signup\">Register</Link>\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    search: state.search,\n  };\n}\n\nexport default connect(mapStateToProps)(Navbar);\n","import {\n  LOGIN_START,\n  LOGIN_FAILED,\n  LOGIN_SUCCESS,\n  AUTHENTICATE_USER,\n  LOG_OUT,\n  SIGNUP_START,\n  SIGNUP_FAILED,\n  SIGNUP_SUCCESS,\n  CLEAR_AUTH_STATE,\n  EDIT_USER_SUCCESSFUL,\n  EDIT_USER_FAILED,\n} from './actionTypes';\nimport { APIUrls } from '../helper/urls';\nimport { getFormBody, getAuthTokenFromLocalStorage } from '../helper/utils';\n\n// login\nexport function startLogin() {\n  return {\n    type: LOGIN_START,\n  };\n}\n\nexport function loginFailed(errorMessage) {\n  return {\n    type: LOGIN_FAILED,\n    error: errorMessage,\n  };\n}\n\nexport function loginSuccess(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    user,\n  };\n}\n\nexport function login(email, password) {\n  return (dispatch) => {\n    dispatch(startLogin());\n    const url = APIUrls.login();\n    // fetch method is generally gets data but here for login we need to post so\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded', //users/login?email=k@k.com&password=1 (the encoded url will look like this)\n      },\n      // method to convert (email and pass) in encoded form (above)\n      body: getFormBody({ email, password }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('data', data);\n\n        if (data.success) {\n          // dispatch\n          localStorage.setItem('token', data.data.token);\n          dispatch(loginSuccess(data.data.user));\n          return;\n        }\n        dispatch(loginFailed(data.message));\n      });\n  };\n}\n\n// signup\nexport function startSignup() {\n  return {\n    type: SIGNUP_START,\n  };\n}\n\nexport function signupFailed(error) {\n  return {\n    type: SIGNUP_FAILED,\n    error,\n  };\n}\n\nexport function signupSuccess(user) {\n  return {\n    type: SIGNUP_SUCCESS,\n    user,\n  };\n}\n\nexport function signup(name, email, password, confirmPassword) {\n  // console.log('username', username);\n  // console.log('email', email);\n  // console.log('password', password);\n  // console.log('confirm', confirmPassword);\n  return (dispatch) => {\n    dispatch(startSignup());\n    console.log('hello');\n    const url = APIUrls.signup();\n    console.log(url);\n    // fetch method is generally gets data but here for login we need to post so\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: getFormBody({\n        name,\n        email,\n        password,\n        confirm_password: confirmPassword,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('signup data', data);\n\n        if (data.success) {\n          // dispatch\n          console.log('hello');\n          localStorage.setItem('token', data.data.token);\n          dispatch(signupSuccess(data.data.user));\n          return;\n        }\n        dispatch(signupFailed(data.message));\n      });\n  };\n}\n\nexport function authenticateUser(user) {\n  return {\n    type: AUTHENTICATE_USER,\n    user,\n  };\n}\n\nexport function logOutUser() {\n  return {\n    type: LOG_OUT,\n  };\n}\n\nexport function clearAuthState() {\n  return {\n    type: CLEAR_AUTH_STATE,\n  };\n}\n\nexport function editUserSuccessful(user) {\n  return {\n    type: EDIT_USER_SUCCESSFUL,\n    user,\n  };\n}\n\nexport function editUserFailed(error) {\n  return {\n    type: EDIT_USER_FAILED,\n    error,\n  };\n}\n\nexport function editUser(name, password, confirmPassword, userId) {\n  return (dispatch) => {\n    // dispatch(startLogin());\n    const url = APIUrls.editProfile();\n    // fetch method is generally gets data but here for login we need to post so\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n      body: getFormBody({\n        name,\n        password,\n        confirm_password: confirmPassword,\n        id: userId,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('EDIT PROFILE data', data);\n\n        if (data.success) {\n          // dispatch\n          dispatch(editUserSuccessful(data.data.user));\n          if (data.data.token) {\n            localStorage.setItem('token', data.data.token);\n            return;\n          }\n        }\n        dispatch(editUserFailed(data.message));\n      });\n  };\n}\n","import React, { Component } from 'react';\nimport { PostsList, FriendList, Chat } from './index';\n\nclass Home extends Component {\n  render() {\n    const { posts, friends, isLoggedIn } = this.props;\n    console.log('props', this.props);\n    return (\n      <div className=\"home\">\n        <PostsList posts={posts} />\n        {/* <FriendList friends={friends} /> */}\n        {isLoggedIn && <FriendList friends={friends} />}\n        {isLoggedIn && <Chat />}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Page404(props) {\n  return (\n    <div>\n      <h1>404:Nothing found here!</h1>\n    </div>\n  );\n}\n\nexport default Page404;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login } from '../actions/auth';\nimport { clearAuthState } from '../actions/auth';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    // this.emailInputRef = React.createRef();\n    // this.passwordRef = React.createRef();\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n  componentWillUnmount = () => {\n    this.props.dispatch(clearAuthState());\n  };\n\n  handleEmailChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      email: e.target.value,\n    });\n  };\n\n  handlePasswordChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      password: e.target.value,\n    });\n  };\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    // console.log('this.emailInputRef', this.emailInputRef);\n    // console.log('this.passwordRef', this.passwordRef);\n    console.log(this.state);\n    const { email, password } = this.state;\n\n    if (email && password) {\n      this.props.dispatch(login(email, password));\n    }\n  };\n\n  render() {\n    const { error, inProgress, isLoggedIn } = this.props.auth;\n    // console.log('see the props', this.props);\n    // console.log('see the props location', this.props.location.state);\n\n    // address of prev tried location else on home page\n    const { from } = this.props.location.state || { from: { pathname: '/' } };\n\n    if (isLoggedIn) {\n      //redirect to a page which previously tried to access\n      return <Redirect to={from} />;\n    }\n    return (\n      <form className=\"login-form\">\n        <span className=\"login-signup-header\">Log In</span>\n        {error && <div className=\"alert error-dailog\">{error}</div>}\n        <div className=\"field\">\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            required\n            // ref={this.emailInputRef}\n            onChange={this.handleEmailChange}\n            value={this.state.email}\n          />\n        </div>\n        <div className=\"field\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            required\n            // ref={this.passwordRef}\n            onChange={this.handlePasswordChange}\n            value={this.state.password}\n          />\n        </div>\n        <div className=\"field\">\n          {inProgress ? (\n            <button onClick={this.handleFormSubmit} disabled={inProgress}>\n              Logging in...\n            </button>\n          ) : (\n            <button onClick={this.handleFormSubmit} disabled={inProgress}>\n              Log In\n            </button>\n          )}\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.auth,\n  };\n}\nexport default connect(mapStateToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signup } from '../actions/auth';\nimport { clearAuthState } from '../actions/auth';\nimport { Redirect } from 'react-router-dom';\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    // this.emailInputRef = React.createRef();\n    // this.passwordRef = React.createRef();\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    };\n  }\n\n  componentWillUnmount = () => {\n    this.props.dispatch(clearAuthState());\n  };\n\n  handleUsernameChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  handleEmailChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      email: e.target.value,\n    });\n  };\n\n  handlePasswordChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      password: e.target.value,\n    });\n  };\n\n  handleConfirmPasswordChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      confirmPassword: e.target.value,\n    });\n  };\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    // console.log('this.emailInputRef', this.emailInputRef);\n    // console.log('this.passwordRef', this.passwordRef);\n    console.log(this.state);\n    const { email, password, name, confirmPassword } = this.state;\n\n    if (email && password && name && confirmPassword) {\n      // this.props.dispatch(startSignup());\n      this.props.dispatch(signup(name, email, password, confirmPassword));\n    }\n  };\n\n  render() {\n    const { error, inProgress, isLoggedIn } = this.props.auth;\n    if (isLoggedIn) {\n      //redirect to home page\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <form className=\"login-form\">\n        <span className=\"login-signup-header\">Sign Up</span>\n        {error && <div className=\"alert error-dailog\">{error}</div>}\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            required\n            onChange={this.handleUsernameChange}\n            value={this.state.name}\n          />\n        </div>\n        <div className=\"field\">\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            required\n            onChange={this.handleEmailChange}\n            value={this.state.email}\n          />\n        </div>\n        <div className=\"field\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            required\n            onChange={this.handlePasswordChange}\n            value={this.state.password}\n          />\n        </div>\n        <div className=\"field\">\n          <input\n            type=\"password\"\n            placeholder=\"Confirm-Password\"\n            required\n            onChange={this.handleConfirmPasswordChange}\n            value={this.state.confirmPassword}\n          />\n        </div>\n        <div className=\"field\">\n          <button onClick={this.handleFormSubmit} disabled={inProgress}>\n            Sign Up\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    auth,\n  };\n}\n\nexport default connect(mapStateToProps)(Signup);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editUser, clearAuthState } from '../actions/auth';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: props.auth.user.name,\n      password: '',\n      confirmPassword: '',\n      editMode: false,\n    };\n  }\n\n  // to track change in input of each field(common function)\n  handleChange = (fieldName, value) => {\n    this.setState({\n      [fieldName]: value,\n    });\n  };\n\n  // to update or edit profile\n  handleUpdate = () => {\n    const { name, password, confirmPassword } = this.state;\n    const { user } = this.props.auth;\n    this.props.dispatch(editUser(name, password, confirmPassword, user._id));\n  };\n\n  // to clear the state\n  componentWillUnmount = () => {\n    this.props.dispatch(clearAuthState());\n  };\n\n  render() {\n    const { user, error } = this.props.auth;\n\n    // if in editmode then form will show\n    const { editMode } = this.state;\n    return (\n      <div className=\"settings\">\n        <div className=\"img-container\">\n          <img\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n            alt=\"user-dp\"\n          />\n        </div>\n\n        {error && <div className=\"alert error-dailog\">{error}</div>}\n        {error === false && (\n          <div className=\"alert success-dailog\">\n            Profile Successfully Updated\n          </div>\n        )}\n        <div className=\"field\">\n          <div className=\"field-label\">Email</div>\n          <div className=\"field-value\">{user.email}</div>\n        </div>\n\n        <div className=\"field\">\n          <div className=\"field-label\">Name</div>\n          {editMode ? (\n            <input\n              type=\"text\"\n              onChange={(e) => this.handleChange('name', e.target.value)}\n              value={this.state.name}\n            />\n          ) : (\n            <div className=\"field-value\">{user.name}</div>\n          )}\n        </div>\n\n        {editMode && (\n          <div className=\"field\">\n            <div className=\"field-label\">New Password</div>\n            <input\n              type=\"password\"\n              placeholder=\"password\"\n              onChange={(e) => this.handleChange('password', e.target.value)}\n              value={this.state.password}\n            />\n          </div>\n        )}\n\n        {editMode && (\n          <div className=\"field\">\n            <div className=\"field-label\">Confirm Password</div>\n            <input\n              type=\"password\"\n              placeholder=\"Confirm password\"\n              onChange={(e) =>\n                this.handleChange('confirmPassword', e.target.value)\n              }\n              value={this.state.confirmPassword}\n            />\n          </div>\n        )}\n\n        <div className=\"btn-grp\">\n          {editMode ? (\n            <button className=\"button save-btn\" onClick={this.handleUpdate}>\n              Save\n            </button>\n          ) : (\n            <button\n              className=\"button save-btn\"\n              onClick={() => this.handleChange('editMode', true)}\n            >\n              Edit Profile\n            </button>\n          )}\n          {editMode && (\n            <div\n              className=\"go-back\"\n              onClick={() => this.handleChange('editMode', false)}\n            >\n              Go Back\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    auth,\n  };\n}\nexport default connect(mapStateToProps)(Settings);\n","import {\n  USER_PROFILE_SUCCESS,\n  USER_PROFILE_FAILURE,\n  FETCH_USER_PROFILE,\n} from './actionTypes';\nimport { APIUrls } from '../helper/urls';\nimport { getAuthTokenFromLocalStorage } from '../helper/utils';\n\nexport function userProfileSuccess(user) {\n  return {\n    type: USER_PROFILE_SUCCESS,\n    user,\n  };\n}\n\nexport function userProfileFailure(error) {\n  return {\n    type: USER_PROFILE_FAILURE,\n    error,\n  };\n}\n\nexport function startUserProfileFetch() {\n  return {\n    type: FETCH_USER_PROFILE,\n  };\n}\n\nexport function fetchUserProfile(userId) {\n  return (dispatch) => {\n    dispatch(startUserProfileFetch());\n\n    const url = APIUrls.userProfile(userId);\n    fetch(url, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('fetch PROFILE data', data);\n        // dispatch(userProfileSuccess(data.data.user));\n\n        if (data.success) {\n          dispatch(userProfileSuccess(data.data.user));\n          return;\n        }\n        dispatch(userProfileFailure(data.message));\n      });\n  };\n}\n","import {\n  FETCH_FRIENDS_SUCCESS,\n  FETCH_FRIENDS_FAILURE,\n  ADD_FRIEND,\n  REMOVE_FRIEND,\n} from './actionTypes';\nimport { APIUrls } from '../helper/urls';\nimport { getAuthTokenFromLocalStorage } from '../helper/utils';\n\nexport function fetchFriendsSuccess(friends) {\n  return {\n    type: FETCH_FRIENDS_SUCCESS,\n    friends,\n  };\n}\n\nexport function fetchFriendsFailure(error) {\n  return {\n    type: FETCH_FRIENDS_FAILURE,\n    error,\n  };\n}\n\nexport function fetchUserFriends(userId) {\n  return (dispatch) => {\n    const url = APIUrls.userFriends(userId);\n\n    fetch(url, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('friends data', data);\n\n        if (data.success) {\n          dispatch(fetchFriendsSuccess(data.data.friends));\n          return;\n        }\n        dispatch(fetchFriendsFailure(data.message));\n      });\n  };\n}\n\nexport function addFriends(friend) {\n  return {\n    type: ADD_FRIEND,\n    friend,\n  };\n}\n\nexport function removeFriends(userId) {\n  return {\n    type: REMOVE_FRIEND,\n    userId,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserProfile } from '../actions/profile';\nimport { APIUrls } from '../helper/urls';\nimport { getAuthTokenFromLocalStorage } from '../helper/utils';\nimport { addFriends, removeFriends } from '../actions/friends';\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: null,\n      error: null,\n      successMsg: null,\n    };\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n\n    if (match.params.userId) {\n      this.props.dispatch(fetchUserProfile(match.params.userId));\n    }\n  }\n\n  // to open another user profile if a profile is already opened\n  componentDidUpdate(prevProps) {\n    const {\n      match: { params: prevParams },\n    } = prevProps;\n\n    const {\n      match: { params: currParams },\n    } = this.props;\n\n    if (prevParams && currParams && prevParams.userId !== currParams.userId) {\n      this.props.dispatch(fetchUserProfile(currParams.userId));\n    }\n  }\n\n  // check user frnds to show in list\n  checkFriendOfUser = () => {\n    // console.log('check friend', this.props);\n    const { friends } = this.props;\n    // console.log('friends', friends);\n    const userId = this.props.match.params.userId;\n    // console.log('userId', userId);\n\n    const index = friends.map((friend) => friend.to_user._id).indexOf(userId);\n    // console.log('index', index);\n\n    if (index !== -1) {\n      return true;\n    }\n    return false;\n  };\n\n  // add a frnd using async await\n  handleAddFriend = async () => {\n    const userId = this.props.match.params.userId;\n    console.log('userId', userId);\n    const url = APIUrls.addFriend(userId);\n    const option = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    };\n\n    const response = await fetch(url, option);\n    const data = await response.json();\n    console.log('url', url, data);\n    if (data.success) {\n      console.log('add friends', data);\n      this.setState({\n        success: true,\n        successMsg: 'Added friend Successfully!',\n      });\n      this.props.dispatch(addFriends(data.data.friendship));\n    } else {\n      console.log('error in add frnd', data);\n      this.setState({\n        success: null,\n        error: data.message,\n      });\n    }\n  };\n\n  // remove a frnd using async await\n  handleRemoveFriend = async () => {\n    const userId = this.props.match.params.userId;\n\n    const url = APIUrls.removeFriend(userId);\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\n      },\n    };\n\n    const response = await fetch(url, options);\n    const data = await response.json();\n    console.log('remove frnd', data);\n\n    if (data.success) {\n      this.setState({\n        success: true,\n        successMsg: 'removed friend Successfully',\n      });\n      this.props.dispatch(removeFriends(userId));\n    } else {\n      this.setState({\n        success: null,\n        error: data.message,\n      });\n    }\n  };\n\n  render() {\n    const {\n      match: { params },\n      profile,\n    } = this.props;\n    const { user } = profile;\n\n    console.log('userProfile', this.props);\n    console.log('userProfile props', params);\n\n    const { success, error, successMsg } = this.state;\n    const isFriendOfUser = this.checkFriendOfUser();\n\n    if (profile.inProgress) {\n      return <h1>Loading!</h1>;\n    }\n\n    return (\n      <div className=\"settings\">\n        <div className=\"img-container\">\n          <img\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n            alt=\"user-dp\"\n          />\n        </div>\n\n        {success && <div className=\"alert success-dailog\">{successMsg}</div>}\n        {error && <div className=\"alert error-dailog\">{error}</div>}\n\n        <div className=\"field\">\n          <div className=\"field-label\">Name</div>\n          <div className=\"field-value\">{user.name}</div>\n        </div>\n\n        <div className=\"field\">\n          <div className=\"field-label\">Email</div>\n          <div className=\"field-value\">{user.email}</div>\n        </div>\n\n        <div className=\"btn-grp\">\n          {!isFriendOfUser && (\n            <button className=\"button save-btn\" onClick={this.handleAddFriend}>\n              Add Friend\n            </button>\n          )}\n          {isFriendOfUser && (\n            <button\n              className=\"button save-btn\"\n              onClick={this.handleRemoveFriend}\n            >\n              Remove Friend\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ profile, friends }) {\n  return {\n    profile,\n    friends,\n  };\n}\nexport default connect(mapStateToProps)(UserProfile);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction FriendListItem(props) {\n  return (\n    <div>\n      {/* link to send on user Profile */}\n      <Link className=\"friends-item\" to={`user/${props.friend._id}`}>\n        <div className=\"friends-img\">\n          <img\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n            alt=\"user-pic\"\n          />\n        </div>\n        <div className=\"friends-name\">{props.friend.email}</div>\n      </Link>\n    </div>\n  );\n}\n\nexport default FriendListItem;\n","import React from 'react';\nimport FriendListItem from './FriendListItem';\n\nclass FriendList extends React.Component {\n  render() {\n    const { friends } = this.props;\n    return (\n      <div className=\"friends-list\">\n        <div className=\"header\">Friends</div>\n\n        {friends && friends.length === 0 && (\n          <div className=\"no-friends\">No friends found!</div>\n        )}\n\n        {friends &&\n          friends.map((friend) => (\n            <FriendListItem friend={friend.to_user} key={friend._id} />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default FriendList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/posts';\n\nclass CreatePost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: '',\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value,\n    });\n  };\n\n  // to add post after submit\n  handleAddPost = () => {\n    this.props.dispatch(createPost(this.state.content));\n    this.setState({\n      content: '',\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"create-post\">\n        <textarea\n          className=\"add-post\"\n          value={this.state.content}\n          onChange={this.handleChange}\n        />\n\n        <div>\n          <button id=\"add-post-btn\" onClick={this.handleAddPost}>\n            Add Post\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// to get only dispatch from store\nexport default connect()(CreatePost);\n","import { Comment } from './index';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createComment, addLikes } from '../actions/posts';\nimport React from 'react';\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: '',\n    };\n  }\n\n  // to track change in input\n  handleChange = (e) => {\n    this.setState({\n      comment: e.target.value,\n    });\n  };\n\n  // to add comment on enter\n  handleKeyDown = (e) => {\n    const { post } = this.props;\n    const { comment } = this.state;\n    // console.log('postId', postId);\n    if (e.key === 'Enter') {\n      // console.log('comment', e.target.value);\n      //   const content = e.target.value;\n      this.props.dispatch(createComment(comment, post._id));\n      this.setState({\n        comment: '',\n      });\n    }\n  };\n\n  // add like on post\n  handleAddLike = () => {\n    const { post, user } = this.props;\n    this.props.dispatch(addLikes(post._id, 'Post', user._id));\n  };\n\n  render() {\n    const { post, user } = this.props;\n\n    // to change color of heart after liking\n    const isPostLikedByUser = post.likes.includes(user._id);\n\n    return (\n      <div className=\"post-wrapper\" key={post._id}>\n        <div className=\"post-header\">\n          <div className=\"post-avatar\">\n            <Link to={`/user/${post.user._id}`}>\n              <img\n                src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\n                alt=\"user-pic\"\n              />\n            </Link>\n            <div>\n              <span className=\"post-author\">{post.user.name}</span>\n              <span className=\"post-time\">a minute ago</span>\n            </div>\n          </div>\n          <div className=\"post-content\">{post.content}</div>\n\n          <div className=\"post-actions\">\n            <button className=\"post-like no-btn\" onClick={this.handleAddLike}>\n              {isPostLikedByUser ? (\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/1076/1076984.svg\"\n                  alt=\"like post\"\n                />\n              ) : (\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/1077/1077035.svg\"\n                  alt=\"likes-icon\"\n                />\n              )}\n              <span>{post.likes.length}</span>\n            </button>\n\n            <div className=\"post-comments-icon\">\n              <img\n                src=\"https://image.flaticon.com/icons/svg/1380/1380338.svg\"\n                alt=\"comments-icon\"\n              />\n              <span>{post.comments.length}</span>\n            </div>\n          </div>\n          <div className=\"post-comment-box\">\n            <input\n              placeholder=\"Start typing a comment\"\n              onChange={this.handleChange}\n              onKeyDown={this.handleKeyDown}\n              value={this.state.comment}\n            />\n          </div>\n\n          <div className=\"post-comments-list\">\n            {post.comments.map((comment) => (\n              <Comment postId={post._id} comment={comment} key={comment._id} />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    user: auth.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addLikes, addPost } from '../actions/posts';\n\nclass Comment extends React.Component {\n  // add like on comment\n  handleAddCommentLike = () => {\n    const { comment, user, postId } = this.props;\n    this.props.dispatch(addLikes(comment._id, 'Comment', user._id, postId));\n  };\n\n  render() {\n    const { comment } = this.props;\n\n    return (\n      <div className=\"post-comment-item\">\n        <div className=\"post-comment-header\">\n          <span className=\"post-comment-author\">{comment.user.name}</span>\n          <span className=\"post-comment-time\">{comment.createdAt}</span>\n          <span className=\"post-comment-likes\">\n            {comment.likes.length}\n            <button className=\" no-btn\" onClick={this.handleAddCommentLike}>\n              likes\n            </button>\n          </span>\n        </div>\n\n        <div className=\"post-comment-content\">{comment.content}</div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    user: auth.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Comment);\n","import React, { Component } from 'react';\nimport '../chat.css';\nimport io from 'socket.io-client';\nimport { connect } from 'react-redux';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [],\n      typedMessage: '',\n      open: true,\n    };\n\n    // connecting socket using chat server\n    this.socket = io.connect('http://54.237.158.65:5000');\n    this.userEmail = props.user.email;\n\n    if (this.userEmail) {\n      this.setupConnections();\n    }\n  }\n\n  // makinf connection for group chat using socket\n  setupConnections = () => {\n    const socketConnection = this.socket;\n    const self = this;\n\n    this.socket.on('connect', function () {\n      console.log('CONNECTION ESTABLISHED');\n\n      socketConnection.emit('join_room', {\n        user_email: this.userEmail,\n        chatroom: 'codeial',\n      });\n\n      socketConnection.on('user_joined', function (data) {\n        // console.log('NEW USER JOINED', data);\n      });\n    });\n\n    this.socket.on('receive_message', function (data) {\n      // add message to state\n      const { messages } = self.state;\n      const messageObject = {};\n      messageObject.content = data.message;\n\n      if (data.user_email === self.userEmail) {\n        messageObject.self = true;\n      }\n\n      self.setState({\n        messages: [...messages, messageObject],\n        typedMessage: '',\n      });\n    });\n  };\n\n  // submit msg in group chat\n  handleSubmit = () => {\n    const { typedMessage } = this.state;\n\n    if (typedMessage && this.userEmail) {\n      this.socket.emit('send_message', {\n        message: typedMessage,\n        user_email: this.userEmail,\n        chatroom: 'codeial',\n      });\n    }\n  };\n\n  // to open and close chat box\n  toggleClass = () => {\n    const currentState = this.state.open;\n    this.setState({ open: !currentState });\n  };\n\n  render() {\n    const { messages, typedMessage } = this.state;\n    return (\n      <div\n        className={\n          this.state.open ? 'chat-container open' : 'chat-container close'\n        }\n      >\n        <div className=\"chat-header\">\n          Chat\n          {this.state.open ? (\n            <img\n              src=\"https://www.iconsdb.com/icons/preview/white/minus-5-xxl.png\"\n              alt=\"\"\n              height={17}\n              onClick={this.toggleClass}\n            />\n          ) : (\n            <img\n              src=\"https://www.iconsdb.com/icons/preview/white/plus-5-xxl.png\"\n              alt=\"\"\n              height={17}\n              onClick={this.toggleClass}\n            />\n          )}\n        </div>\n        <div className=\"chat-messages\">\n          {messages.map((message) => (\n            <div\n              className={\n                message.self\n                  ? 'chat-buuble self-chat'\n                  : 'chat-bubble other-chat'\n              }\n            >\n              {message.content}\n            </div>\n          ))}\n        </div>\n        <div className=\"chat-footer\">\n          <input\n            type=\"text\"\n            value={typedMessage}\n            onChange={(e) => this.setState({ typedMessage: e.target.value })}\n          />\n          <button onClick={this.handleSubmit}>Submit</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    user: auth.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Chat);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { fetchPosts } from '../actions/posts';\nimport {\n  Navbar,\n  Home,\n  Page404,\n  Login,\n  Signup,\n  Settings,\n  UserProfile,\n} from './index';\nimport propTypes from 'prop-types';\nimport * as jwtDecode from 'jwt-decode';\nimport { authenticateUser } from '../actions/auth';\nimport { fetchUserFriends } from '../actions/friends';\n\n// added private route for settings,userProfile,and also for more if added\nconst PrivateRoute = (privateRouteProps) => {\n  const { path, isLoggedIn, component: Component } = privateRouteProps;\n  return (\n    <Route\n      path={path}\n      render={(props) => {\n        return isLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: {\n                from: props.location,\n              },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\nclass App extends React.Component {\n  // to fetch all the posts from api\n  componentDidMount() {\n    this.props.dispatch(fetchPosts());\n\n    // jwt token of user logged in\n    const token = localStorage.token;\n    if (token) {\n      const user = jwtDecode(token);\n      console.log('user', user);\n\n      this.props.dispatch(\n        authenticateUser({\n          _id: user._id,\n          name: user.name,\n          email: user.email,\n        })\n      );\n\n      this.props.dispatch(fetchUserFriends(user._id));\n    }\n  }\n\n  render() {\n    // console.log('props', this.props);\n    const { posts, auth, friends } = this.props;\n    return (\n      <Router>\n        <div>\n          <Navbar />\n        </div>\n\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => {\n              return (\n                <Home\n                  {...props}\n                  posts={posts}\n                  friends={friends}\n                  isLoggedIn={auth.isLoggedIn}\n                />\n              );\n            }}\n          />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <PrivateRoute\n            path=\"/settings\"\n            component={Settings}\n            isLoggedIn={auth.isLoggedIn}\n          />\n          <PrivateRoute\n            path=\"/user/:userId\"\n            component={UserProfile}\n            isLoggedIn={auth.isLoggedIn}\n          />\n          <Route component={Page404} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\n// to send in props, the things we require from store\nfunction mapStateToProps(state) {\n  return {\n    posts: state.posts,\n    auth: state.auth,\n    friends: state.friends,\n  };\n}\n\n// to match the type of prop required\nApp.propTypes = {\n  posts: propTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps)(App);\n","import {\n  LOGIN_START,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  SIGNUP_START,\n  SIGNUP_FAILED,\n  SIGNUP_SUCCESS,\n  AUTHENTICATE_USER,\n  LOG_OUT,\n  CLEAR_AUTH_STATE,\n  EDIT_USER_SUCCESSFUL,\n  EDIT_USER_FAILED,\n} from '../actions/actionTypes';\n\nconst initialAuthState = {\n  user: {},\n  isLoggedIn: false,\n  inProgress: false,\n  error: null,\n};\n\nexport default function auth(state = initialAuthState, action) {\n  switch (action.type) {\n    case LOGIN_START:\n    case SIGNUP_START:\n      // console.log('hjdhjd', state);\n      return {\n        ...state,\n        inProgress: true,\n      };\n    case LOGIN_SUCCESS:\n    case SIGNUP_SUCCESS:\n      return {\n        ...state,\n        user: action.user,\n        isLoggedIn: true,\n        inProgress: false,\n        error: null,\n      };\n    case LOGIN_FAILED:\n    case SIGNUP_FAILED:\n      return {\n        ...state,\n        inProgress: false,\n        error: action.error,\n      };\n\n    case AUTHENTICATE_USER:\n      return {\n        ...state,\n        isLoggedIn: true,\n        user: action.user,\n      };\n\n    case LOG_OUT:\n      return {\n        ...state,\n        user: {},\n        isLoggedIn: false,\n      };\n\n    case CLEAR_AUTH_STATE:\n      return {\n        ...state,\n        error: null,\n      };\n\n    case EDIT_USER_SUCCESSFUL:\n      return {\n        ...state,\n        user: action.user,\n        error: false,\n      };\n\n    case EDIT_USER_FAILED:\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  USER_PROFILE_SUCCESS,\n  USER_PROFILE_FAILURE,\n  FETCH_USER_PROFILE,\n} from '../actions/actionTypes';\n\nconst initialProfileState = {\n  user: {},\n  inProgress: false,\n  error: null,\n  success: null,\n};\n\nexport default function profile(state = initialProfileState, action) {\n  switch (action.type) {\n    case USER_PROFILE_SUCCESS:\n      return {\n        ...state,\n        inProgress: false,\n        user: action.user,\n        success: true,\n      };\n    case USER_PROFILE_FAILURE:\n      return {\n        ...state,\n        inProgress: false,\n        error: action.error,\n      };\n\n    case FETCH_USER_PROFILE:\n      return {\n        ...state,\n        inProgress: true,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  FETCH_FRIENDS_SUCCESS,\n  FETCH_FRIENDS_FAILURE,\n  ADD_FRIEND,\n  REMOVE_FRIEND,\n} from '../actions/actionTypes';\n\nconst initialFriendsState = [];\n\nexport default function friends(state = initialFriendsState, action) {\n  switch (action.type) {\n    case FETCH_FRIENDS_SUCCESS:\n      return [...action.friends];\n\n    case FETCH_FRIENDS_FAILURE:\n      return action.error;\n\n    case ADD_FRIEND:\n      return state.concat(action.friend);\n\n    case REMOVE_FRIEND:\n      const newArr = state.filter(\n        (friend) => friend.to_user._id !== action.userId\n      );\n      return newArr;\n\n    default:\n      return state;\n  }\n}\n","import { USER_SEARCH_RESULT_SUCCESS } from '../actions/actionTypes';\n\nconst initialSearchState = {\n  results: [],\n};\n\nexport default function search(state = initialSearchState, action) {\n  switch (action.type) {\n    case USER_SEARCH_RESULT_SUCCESS:\n      return {\n        ...state,\n        results: action.users,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport posts from './posts';\nimport auth from './auth';\nimport profile from './profile';\nimport friends from './friends';\nimport search from './search';\n\n// export combine Reducer with all the reducers from single file\nexport default combineReducers({\n  posts,\n  auth,\n  profile,\n  friends,\n  search,\n});\n","import {\n  UPDATE_POSTS,\n  ADD_POST,\n  ADD_COMMENT,\n  UPDATE_POST_LIKES,\n  UPDATE_COMMENT_LIKES,\n} from '../actions/actionTypes';\n\n// post reducer with posts actions\nexport default function posts(state = [], action) {\n  switch (action.type) {\n    case UPDATE_POSTS:\n      return action.posts;\n\n    case ADD_POST:\n      return [action.post, ...state];\n\n    case ADD_COMMENT:\n      const newPostArray = state.map((post) => {\n        if (post._id === action.postId) {\n          // post.comments = [action.comment, ...state];\n          return {\n            ...post,\n            comments: [action.comment, ...post.comments],\n          };\n        }\n        return post;\n      });\n      return newPostArray;\n\n    case UPDATE_POST_LIKES:\n      const newArray = state.map((post) => {\n        if (post._id === action.postId) {\n          // post.comments = [action.comment, ...state];\n          return {\n            ...post,\n            likes: [...post.likes, action.userId],\n          };\n        }\n        return post;\n      });\n      return newArray;\n\n    case UPDATE_COMMENT_LIKES:\n      const postArr = state.map((post) => {\n        if (post._id === action.postId) {\n          const commentArr = post.comments.map((comment) => {\n            if (comment._id === action.commentId) {\n              return {\n                ...comment,\n                likes: [...comment.likes, action.userId],\n              };\n            }\n            return comment;\n          });\n          return {\n            ...post,\n            comments: [...commentArr],\n          };\n        }\n        return post;\n      });\n      return postArr;\n\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { configureStore } from './store/index';\nimport { Provider } from 'react-redux';\n\n// getting store from index of store via configureStore() function\nconst store = configureStore();\nconsole.log('store', store.getState());\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n","import { createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from '../reducers/index';\nimport logger from 'redux-logger';\n\nlet store;\n\n// creating store with middlewares\nexport function configureStore() {\n    store=createStore(reducer,applyMiddleware(thunk,logger));\n\n    return store;\n}"],"sourceRoot":""}